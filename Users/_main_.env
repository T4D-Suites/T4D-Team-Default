
_t4dSystemAddToPATH "/sbin" "/usr/local/bin" "/usr/sbin" "/bin" "/usr/bin"

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Git
alias gits='_t4dSrcGitStatus'
alias gitd='git diff'
alias gita='git add'

gitc(){
    echo "$(echo " $@" | tr '[:upper:]' '[:lower:]' | sed "s| -f| \\\nfeat:|g" | sed "s| -b| \\\nfix:|g" | sed "s| -m| \\\nchore:|g" | sed "s| -r| \\\nrefactor:|g" | sed "s| -ci| \\\nci:|g" | sed "s| -p| \\\nperf:|g" | sed "s| -d|\\\ndocs:|g")" > .commit.tmp
    git commit -F .commit.tmp
    rm .commit.tmp
}
alias gitp='git push'
alias gitpp='git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)'
alias gitt='git lfs track'
alias gitr='cd $(git rev-parse --show-cdup)'
alias c4d='cd $Tools4Dev_PATH'


gitls(){
    if [[ $(echo $1 | grep -Eo '[0-9]*') == "$1" ]]; then
        echo "$(git log --oneline -n $1  | sed "s|\[feat|\\${plgreen}[feat|g" | sed "s|\]|]\\${pstd}|g" \
                                                            | sed "s|\[fix|\\${plyellow}[fix|g" | sed "s|\]|]\\${pstd}|g" \
                                                            | sed "s|fix|\\${plyellow}fix\\${pstd}|g" \
                                                            | sed "s|refactor|\\${plblue}refactor\\${pstd}|g" \
                                                            | sed "s|chore|\\${plblue}chore\\${pstd}|g" \
                                                            | sed "s|feat|\\${plgreen}feat\\${pstd}|g" \
                                                            | sed "s|ci|\\${plpurple}ci\\${pstd}|g" \
                                                            | sed "s|\[refactor|\\${plpurple}[refactor|g" | sed "s|\]|]\\${pstd}|g" \
                                                            | sed "s|\[misc|\\${plblue}[misc|g" | sed "s|\]|]\\${pstd}|g" \
                                                            | sed "s| misc$| \\${plwhite}${mdarrow}\\${pstd}|g"  \
                                                            | sed "s| fix$| \\${plyellow}${mdarrow}\\${pstd}|g"  \
                                                            | sed "s| test$| \\${plblue}${mdarrow}\\${pstd}|g"  \
                                                            | sed "s|\[improvement|\\${plcyan}[improvement|g" | sed "s|\]|]\\${pstd}|g" \
                                                            | sed "s|^|\\${pyellow}|g" | sed "s| |\\${pstd} |" \
                                                            | sed "s|+++ b/.diff||g" \
                                                            | sed 's| +|%          |g' \
                                                            | tr '%' '\n' \
                                                            | sed "s|Merge |\\${pcyan}Merge |g")"
    else
        echo "$(_t4dSrcGitInfoLogFromBranch "${1:-develop}" "HEAD" | sed "s|\[feat|\\${plgreen}[feat|g" | sed "s|\]|]\\${pstd}|g" \
                                                            | sed "s|\[fix|\\${plyellow}[fix|g" | sed "s|\]|]\\${pstd}|g" \
                                                            | sed "s|\[refactor|\\${plpurple}[refactor|g" | sed "s|\]|]\\${pstd}|g" \
                                                            | sed "s|fix:|\\${plyellow}fix\\${pstd}|g" \
                                                            | sed "s|chore:|\\${plblue}chore\\${pstd}|g" \
                                                            | sed "s|feat:|\\${plgreen}feat\\${pstd}|g" \
                                                            | sed "s|\[misc|\\${plblue}[misc|g" | sed "s|\]|]\\${pstd}|g" \
                                                            | sed "s| misc$| \\${plwhite}${mdarrow}\\${pstd}|g"  \
                                                            | sed "s| fix$| \\${plyellow}${mdarrow}\\${pstd}|g"  \
                                                            | sed "s| test$| \\${plblue}${mdarrow}\\${pstd}|g"  \
                                                            | sed "s|\[improvement|\\${plcyan}[improvement|g" | sed "s|\]|]\\${pstd}|g" \
                                                            | sed "s|^|\\${pyellow}|g" | sed "s| |\\${pstd} |" \
                                                            | sed "s|+++ b/.diff||g" \
                                                            | sed 's| +|%          |g' \
                                                            | tr '%' '\n' \
                                                            | sed "s|Merge branch|\\${pcyan}Merge branch|g")"
}

# Others
alias la > /dev/null || alias la='ls -lAFh'
alias fsize='du -hs'
alias fcount='_t4dSystemFileCount'
alias sizeOfFiles='_t4dSystemSizeOfFiles'
alias findInFiles='_t4dSystemFindInFiles'
alias findFiles='_t4dSystemFindFiles'

###################
# ZSH COMPLETION

autoload -U compinit && compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
autoload bashcompinit &> /dev/null
bashcompinit &> /dev/null
setopt PROMPT_SUBST &> /dev/null
##################


##################
# BindKeys
if [[ "$(uname -s)" == "Darwin" ]]; then
    if [[ "$(which bindkey)" != "" ]]; then
        #MacOS
        bindkey '\e[A' history-search-backward
        bindkey '\e[B' history-search-forward
        bindkey '^[^[[D' beginning-of-line	# home
        bindkey '^[^[[C' end-of-line		# end
        bindkey '^[^[[A'  up-line-or-history
        bindkey "^R" history-incremental-search-backward
    fi
else
    #Linux
    bindkey '^[[A'    history-search-backward
    bindkey '^[[B'    history-search-forward
    bindkey '^[[H'    beginning-of-line	# home
    bindkey '^[A'     beginning-of-line	# home
    bindkey '^[[F'    end-of-line		# end
    bindkey '^[[3~'   delete-char
    bindkey '^[[1;5C' forward-word
    bindkey '^[[1;5D' backward-word
    bindkey "^h" run-help
    bindkey "^R" history-incremental-search-backward
fi

ssh@(){
    ssh -A ${2:-xibalba}@$1
}

PS2='`%_> '       # secondary prompt, printed when the shell needs more information to complete a command.
PS3='?# '         # selection prompt used within a select loop.
PS4='+%N:%i:%_> ' # the execution trace prompt (setopt xtrace). default: '+%N:%i>'
if [[ "${_T4dOhMyZsh:-false}" != "true" ]]; then
    function precmd {
        unset PROMPT RPROMPT prompt_pwd prompt_host promptHost prompt_time _t4dStatus prePrompt lastcmd _promptName _commitSha projectVersion
        local _hostName="$(_t4dGetSystemHostName)"
        local prompt_host="${lpurple}${_hostName}${std}"
        local promptHost="${plpurple}${_hostName}${pstd}"
        local projectVersion=""
        if [[ -e $PWD/.git ]]; then
            _commitSha="$(_t4dSrcGitInfoSha)"
            
            if [[ "${WS_SHA}" != "$_commitSha" ]]; then
                local _upToDate="$(_wksGetVersion -up-to-date)"
                if [[ "$WS_SRC_VERSION" != "" ]] && [[ "$WS_SRC_VERSION" != "$_upToDate" ]]; then
                    projectVersion="${pyellow}${_upToDate}${pstd}"
                else
                    projectVersion="${pyellow}${_upToDate}${pstd}"
                fi
            else
                projectVersion="${plpurple}$(_wksGetVersion)${pstd}"
            fi

            if [[ "$T4D_SILENT_COMMAND" != "true" ]] && [[ "$_T4D_COMMIT_STATUS" == "true" ]] && [[ "$(_t4dSrcGitInfoBranchState | sed 's|-| |g')" == "up to date" ]] && [[ "$(_t4dBitBucketSafetyCheck 2>&1 )" == "" ]]; then
                _t4dBitBucketGetCommitStatus "$_commitSha" "$T4D_PROJECT_LOG_PATH/.CommitStatus" 2> /dev/null
                _CommitStatus="$(_t4dBitBucketParseBuildStatus -prompt "$T4D_PROJECT_LOG_PATH/.CommitStatus")"
            fi
        fi
        local T4D_DEBUG_MODE=false
        _t4dLoadDebugMode

        export T4D_TIME="$(date +%s)"
        local _diffTime="$(expr ${T4D_TIME:-0} - ${T4D_START_TIME:-0} )"
        if [[ ${_diffTime:-0} -gt 0 ]] && [[ ${_diffTime:-0} -lt 60 ]]; then
            local _sec="$(expr $_diffTime % 60 )"
            lastcmd="${red}[${_sec}sec]${std}"
        elif [[ ${_diffTime:-0} -gt 0 ]] && [[ ${_diffTime:-0} -lt 3600 ]]; then
            local _sec="$(expr $_diffTime % 60 )"
            local _min="$(expr $_diffTime / 60 )"
            lastcmd="${red}[${_min}min${_sec}sec]${std}"
        fi
    #    local prompt_pwd="${lcyan}%B%20<..<%~%<..<%b${std}"
        if [[ ${#PWD} -gt 26 ]]; then
            local _pwd=$(echo $PWD | rev | cut -d '/' -f1 | rev | sed 's|^|../|')
        else
            local _pwd=$(echo $PWD | sed "s|${HOME}|~|")
        fi

        
        if  [[ -e $T4D_PROJECT_LOG_PATH/.fetchLog ]] && \
            [[ "$(tail -n+1 $T4D_PROJECT_LOG_PATH/.fetchLog | grep "SILENT FETCH STARTED")" != "" ]] && \
            [[ "$(tail -n+1 $T4D_PROJECT_LOG_PATH/.fetchLog | grep "SILENT FETCH DONE")" == "" ]]; then
            local PromptArrowColor="$lblue"
        fi

        [[ "$(whoami)" == "root" ]] && local _root="${lblue}ROOT${std}"
        local prompt_pwd="${lcyan}${_pwd}${std}"
        local prompt_rv="%(?..${lred}%?${std} )"
        local prompt_time="${lblue}%D{%H:%M}${std}"
        local _t4dStatus="$(_t4dSrcGitInfoBranchStatus false)"
        
        local _CommitStatus=""
        



        prePrompt="${promptHost}:${plcyan}${_pwd} ${projectVersion} ${_t4dStatus}"
        local postPrompt="${plpurple}$(_wksGetVersion)${pstd}"
        local prePromptSize="$(echo $prePrompt)"
        local postPromptSize="$(echo $postPrompt)"
         
        if [[ "$_t4dStatus" != "" ]]; then
            echo "$prePrompt $(_t4dPromptEndOfLine "${_commitSha:0:7}" $plgreen "$(expr ${#prePromptSize} - 24 + 1 )" )   $postPrompt"
            PROMPT="${_root} ${PromptArrowColor:-$lwhite}%1{➢%}${std}  "
        else
            PROMPT="${_root}${prompt_host}:${prompt_pwd} ${lwhite}%1{➢%}${std}  "
        fi
       
        RPROMPT="${prompt_rv} ${_CommitStatus}  ${lastcmd} ${prompt_time}$_T4DPromptFetchStatus"
    }
fi

##################
